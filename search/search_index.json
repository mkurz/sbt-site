{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"sbt-site"},{"location":"/index.html#sbt-site","text":"This sbt plugin generates project websites from static content as well as third-party generators and can optionally include generated Scaladoc. It is designed to work hand-in-hand with publishing plugins like sbt-ghpages.\nBefore upgrading please consult the release notes. Instructions for upgrading from a version before 1.x.x can be found in the migration guide.\nNote Version 1.5+ is published for sbt >= 1.4.9 and requires Java 11+. Version 1.4+ is published for sbt 1.2.x. Version 1.3+ is cross published to both sbt 0.13 and sbt 1.x. As of sbt-site version 1.x.x, sbt version 0.13.10+ or 1.0.0-RC2+ is supported.\nGetting Started Setup Adding Content to Your Site Previewing the Site Packaging and Publishing Preprocessing Substitution Preprocessing Markdown files with tut API documentation Scaladoc Aggregating API documentation with sbt-unidoc Scaladoc from multiple projects Site Generators Asciidoctor Attributes GitBook Hugo Jekyll Laika Nanoc Pamflet Paradox Sphinx Publishing Publishing to GitHub Pages using sbt-ghpages Publishing to GitHub Pages from Travis CI Advanced Usage Running a Site Generator on Multiple Source Directories Migration Guide Migrating from version 1.3.x to 1.4.x ParadoxSitePlugin Migrating from version 0.x.x to 1.x.x Enabling Generators Configuring Site Subdirectory Adding Custom Mappings to a Site Directory Miscellaneous Release Notes Release 1.4.0 Breaking changes Enhancements Release 1.3.3 Enhancements Release 1.3.3 Enhancements Release 1.3.1 Enhancements Fixes Release 1.3.0 Enhancements Fixes Using sbt-site with sbt version 1.0 Release 1.2.1 Enhancements Fixes Release 1.2.0 Enhancements Fixes Release 1.1.0 Enhancements Release 1.0.0 Enhancements Project Management Release 0.8.2 Enhancements Project Management","title":"sbt-site"},{"location":"/getting-started.html","text":"","title":"Getting Started"},{"location":"/getting-started.html#getting-started","text":"This page will help you get started with sbt-site and teach you the basic concepts.","title":"Getting Started"},{"location":"/getting-started.html#setup","text":"To enable the plugin in your sbt project, add the following to your project/plugins.sbt file:\naddSbtPlugin(\"com.github.sbt\" % \"sbt-site\" % \"1.5.0-M3\")\nThe group ID changed to com.github.sbt with sbt-site version 1.5.0.","title":"Setup"},{"location":"/getting-started.html#adding-content-to-your-site","text":"When you run makeSite, your project’s webpage is generated in the target/site directory. By default, all files under src/site that match the includeFilter setting (by default *.html, *.css, *.png, *.jpg, *.gif, *.swf) are included in target/site. If your site mainly contains static content but you want to replace for example a version string in some of the pages you can use preprocessing to substitute variables.\nIn addition to static content, you can also generated content as part of the build process and add it to your site. sbt-site has support for adding Scaladoc and provides several site generators such as Jekyll and Sphinx which can be used for managing your site’s content.\nIf you already have a way to generate a site and all you want is to use sbt-site to package and maybe include API documentation, you can configure siteSourceDirectory to point to the directory containing the generated site files instead of src/site:\nsiteSourceDirectory := target.value / \"generated-stuff\"\nAdditional files outside of siteSourceDirectory can be added via sbt file mappings:\nmappings in makeSite ++= Seq(\n  file(\"LICENSE\") -> \"LICENSE\",\n  file(\"src/assets/favicon.ico\") -> \"favicon.ico\"\n)\nIf you want to add files from an sbt task to a site sub-directory use the provided addMappingsToSiteDir:\n// Define a custom setting and set it to the directory path\nval someDirName = settingKey[String](\"Some dir name\")\nsomeDirName := \"someFancySource\"\n\naddMappingsToSiteDir(Compile / packageSrc / mappings, someDirName)\n\n// Or using siteSubdirName scoped to a sbt task or a configuration\nScalaUnidoc / siteSubdirName := \"api\"\naddMappingsToSiteDir(ScalaUnidoc/ packageDoc / mappings, ScalaUnidoc / siteSubdirName)\nNote addMappingsToSiteDir requires that the site sub-directory name is passed via a setting’s key. In most cases this can be achieved by scoping sbt-site’s siteSubdirName setting’s key to the task providing the mappings as shown above.","title":"Adding Content to Your Site"},{"location":"/getting-started.html#previewing-the-site","text":"To preview your generated site, you can run previewSite which launches a static web server, or previewAuto which launches a dynamic server updating its content at each modification in your source files. Both launch the server on port 4000 and attempts to connect your browser to http://localhost:4000/. To change the server port, use the key previewFixedPort:\npreviewFixedPort := Some(9999)\nTo disable browser auto-open, use the key previewLaunchBrowser:\npreviewLaunchBrowser := false\nIn case the page to start preview from isn’t the site root, set previewPath to the desired path:\npreviewPath := \"docs/index.html\"","title":"Previewing the Site"},{"location":"/getting-started.html#packaging-and-publishing","text":"To create a zip package of the site run package-site.\nTo also include this zip file as an artifact when running publish, add the following to your build.sbt:\npublishSite\nOnce you have generated and packaged your site the next step is to publish it. The publishing section discusses several mechanisms, such as sbt-ghpages.","title":"Packaging and Publishing"},{"location":"/preprocess.html","text":"","title":"Preprocessing"},{"location":"/preprocess.html#preprocessing","text":"sbt-site supports simple variable and Regular Expression substitution via the PreprocessPlugin if for example you need to replace a version string in a source file or a generated HTML file. More advanced preprocessing, such as interpreting code snippets with tut, is possible via additional configuration as shown below.","title":"Preprocessing"},{"location":"/preprocess.html#substitution","text":"The PreprocessPlugin reads files from an input directory, substitute variables and writes them to an output directory. In addition to preprocessing static content it is also possible to use the plugin either before or after invoking a site generator. To enable, add this to your build.sbt file:\nenablePlugins(PreprocessPlugin)\nBy default files are read from src/site-preprocess but this is configurable by setting sourceDirectory:\nPreprocess / sourceDirectory := sourceDirectory.value / \"site-preprocess\"\nVariables are delimited by surrounding the name with @ symbols (e.g. @VERSION@). Values are assigned to variables via the setting preprocessVars: Map[String, String]. For example:\nPreprocess / preprocessVars := Map(\"VERSION\" -> version.value, \"DATE\" -> new Date().toString)\nNote The plugin will generate an error if a variable is found in the source file with no matching value in preprocessVars.\nMore advanced substitution patterns can be used by providing Regular Expression rules via the setting preprocessRules: Seq[(Regex, Match => String)]. For example Scaladoc used to (before 2.12.9 and 2.13.0) prepend “.scala” to source links of Java files. The following preprocessing rule will find and fix such links:\npreprocessRules in Preprocess := Seq(\n  (\"\\\\.java\\\\.scala\".r, _ => \".java\")\n)\nThe setting preprocessIncludeFilter is used to define the filename extensions that should be processed when makeSite is run.\npreprocessIncludeFilter := \"*.md\" | \"*.markdown\"\nThe default filter is:\n\"*.txt\" | \"*.html\" | \"*.md\" | \"*.rst\"","title":"Substitution"},{"location":"/preprocess.html#preprocessing-markdown-files-with-tut","text":"The tut sbt plugin allows you to write documentation with fenced code blocks that is typechecked and run as part of your build. For example this markdown snippet:\nHere is how you add numbers:\n\n```tut\n1 + 1\n```\nWill show the result of running the code in the Scala REPL:\nHere is how you add numbers:\n\n```scala\nscala> 1 + 1\nres0: Int = 2    \n```\nThe following example shows how to use it to preprocess a collection of markdown files before running a site generator.\nenablePlugins(ParadoxPlugin, ParadoxSitePlugin, TutPlugin)\nCompile / paradox / sourceDirectory := tutTargetDirectory.value\nmakeSite := makeSite.dependsOn(tut).value\nThe example uses the Paradox site generator but can be adapted to any site generator which understands markdown by configuring its sourceDirectory accordingly. For Jekyll, this would be:\nJekyll / sourceDirectory := tutTargetDirectory.value","title":"Preprocessing Markdown files with tut"},{"location":"/api-documentation.html","text":"","title":"API documentation"},{"location":"/api-documentation.html#api-documentation","text":"","title":"API documentation"},{"location":"/api-documentation.html#scaladoc","text":"To include Scaladoc with your site, add the following line to your build.sbt:\nenablePlugins(SiteScaladocPlugin)\nThis will default to putting the Scaladoc under the latest/api directory on the website. You can change this with the siteSubdirName key in the SiteScaladoc scope:\n// Puts Scaladoc output in `target/site/api/latest`\nSiteScaladoc / siteSubdirName := \"api/latest\"","title":"Scaladoc"},{"location":"/api-documentation.html#aggregating-api-documentation-with-sbt-unidoc","text":"sbt-unidoc allows to aggregate Scaladoc or Javadoc from sub-projects into a unified view. The following example shows how you can add aggregated Scaladoc to your site:\nlazy val cats = project.in(file(\"cats\"))\nlazy val kittens = project.in(file(\"kittens\")).dependsOn(cats)\n\nlazy val root = project.in(file(\".\"))\n  .settings(\n    ScalaUnidoc / siteSubdirName := \"api\",\n    addMappingsToSiteDir(ScalaUnidoc / packageDoc / mappings, ScalaUnidoc / siteSubdirName)\n  )\n  .enablePlugins(ScalaUnidocPlugin)\n  .aggregate(cats, kittens)","title":"Aggregating API documentation with sbt-unidoc"},{"location":"/api-documentation.html#scaladoc-from-multiple-projects","text":"In case you want to include the Scaladoc separate for each sub-product there are several options. If you only have a few sub-projects the simplest solution is to manually include the scaladoc for each project:\nlazy val cats = project.in(file(\"cats\"))\nlazy val kittens = project.in(file(\"kittens\")).dependsOn(cats)\n\n// Define a `Configuration` for each project.\nval Cats = config(\"cats\")\nval Kittens = config(\"kittens\")\n\nlazy val siteWithScaladoc = project.in(file(\"site/scaladoc\"))\n  .settings(\n    SiteScaladocPlugin.scaladocSettings(Cats, cats / Compile / packageDoc / mappings, \"api/cats\"),\n    SiteScaladocPlugin.scaladocSettings(Kittens, kittens / Compile / packageDoc / mappings, \"api/kittens\")\n  )\nFor projects with many such sub-projects, a more maintainable approach is to configure it in a more programatic way:\nlazy val cats = project.in(file(\"cats\"))\nlazy val kittens = project.in(file(\"kittens\")).dependsOn(cats)\n\nlazy val scaladocSiteProjects = List((cats, Cats), (kittens, Kittens))\n\nlazy val scaladocSiteSettings = scaladocSiteProjects.flatMap { case (project, conf) =>\n  SiteScaladocPlugin.scaladocSettings(\n    conf,\n    project / Compile / packageDoc / mappings,\n    s\"api/${project.id}\"\n  )\n}\n\nval siteWithScaladocAlt = project.in(file(\"site/scaladoc-alternative\"))\n  .settings(scaladocSiteSettings)","title":"Scaladoc from multiple projects"},{"location":"/generators/index.html","text":"","title":"Site Generators"},{"location":"/generators/index.html#site-generators","text":"Site generators are provided via separate plugins. Below all supported plugins are listed in alphabetical order.\nAsciidoctor Attributes GitBook Hugo Jekyll Laika Nanoc Pamflet Paradox Sphinx","title":"Site Generators"},{"location":"/generators/asciidoctor.html","text":"","title":"Asciidoctor"},{"location":"/generators/asciidoctor.html#asciidoctor","text":"The sbt-site plugin has direct support for building Asciidoctor projects. To enable Asciidoctor site generation, simply enable the associated plugin in your build.sbt file:\nenablePlugins(AsciidoctorPlugin)\nThis assumes you have an Asciidoctor project under the src/asciidoctor directory. To change this, set the sourceDirectory key in the Asciidoctor scope:\nAsciidoctor / sourceDirectory := sourceDirectory.value / \"asciimd\"\nSimilarly, the output can be redirected to a subdirectory of target/site via the siteSubdirName key in Asciidoctor scope:\n// Puts output in `target/site/asciimd`\nAsciidoctor / siteSubdirName := \"asciimd\"","title":"Asciidoctor"},{"location":"/generators/asciidoctor.html#attributes","text":"Asciidoctor allows the rendering of documents to be inflenced by attributes.\nYou can configure attributes by setting asciidoctorAttributes.\nasciidoctorAttributes := Map(\n  \"skip-front-matter\" -> \"\", // attribute without value can be set to empty string\n  \"lang\" -> \"nl\" // attribute with value\n)","title":"Attributes"},{"location":"/generators/gitbook.html","text":"","title":"GitBook"},{"location":"/generators/gitbook.html#gitbook","text":"The sbt-site plugin has direct support for building GitBook projects. To enable GitBook site generation, simply enable the associated plugin in your build.sbt file:\nenablePlugins(GitBookPlugin)\nThis assumes you have a GitBook project under the src/gitbook directory. To change this, set the sourceDirectory key in the GitBook scope:\nGitBook / sourceDirectory := sourceDirectory.value / \"doc\"\nSimilarly, the output can be redirected to a subdirectory of target/site via the siteSubdirName key in GitBook scope:\n// Puts output in `target/site/book`\nGitBook / siteSubdirName := \"book\"\nThe plugin can also be configured to manage all GitBook setup and installation by configuring a dedicated directory in which GitBook’s npm packages can be installed.\nGitBook / gitbookInstallDir := Some(baseDirectory.value / \"node_modules\" / \"gitbook\")","title":"GitBook"},{"location":"/generators/hugo.html","text":"","title":"Hugo"},{"location":"/generators/hugo.html#hugo","text":"The sbt-site plugin has support for building Hugo projects. To enable Hugo site generation, simply enable the associated plugin in your build.sbt file:\nenablePlugins(HugoPlugin)\nThe hugo binary must be installed on your $PATH in order to be accessible to sbt-site. In addition, this plugin assumes you have a Hugo project under the src/hugo directory. To change this, set the sourceDirectory key in the Hugo scope:\nHugo / sourceDirectory := sourceDirectory.value / \"doc\"\nYou may also change the base-url that gets passed to the hugo command by adjusting the following setting:\nHugo / baseURL := uri(\"https://yourdomain.com\")\nTo export environment variables when forking the hugo process, for example to render with Hugo’s getenv function, use:\nHugo / extraEnv := Map(\"MY_ENV\" -> \"Is set!\", \"MY_OTHER_ENV\" -> \"Is also set.\")","title":"Hugo"},{"location":"/generators/jekyll.html","text":"","title":"Jekyll"},{"location":"/generators/jekyll.html#jekyll","text":"The sbt-site plugin has direct support for running Jekyll. This is useful for supporting custom Jekyll plugins that are not allowed when publishing to GitHub, or hosting a Jekyll site on your own server. To add Jekyll support, enable the associated plugin:\nenablePlugins(JekyllPlugin)\nThis assumes you have a Jekyll project in the src/jekyll directory. To change this, set the key sourceDirectory in the Jekyll scope:\nJekyll / sourceDirectory := sourceDirectory.value / \"hyde\"\nTo redirect the output to a subdirectory of target/site, use the siteSubdirName key in Jekyll scope:\n// Puts output in `target/site/notJekyllButHyde`\nJekyll / siteSubdirName := \"notJekyllButHyde\"\nOne common issue with Jekyll is ensuring that everyone uses the same version for generating a website. There is special support for ensuring the version of gems. To do so, add the following to your build.sbt file:\nrequiredGems := Map(\n  \"jekyll\" -> \"2.5.3\",\n  \"liquid\" -> \"2.3.0\"\n)","title":"Jekyll"},{"location":"/generators/laika.html","text":"","title":"Laika"},{"location":"/generators/laika.html#laika","text":"The sbt-site plugin has support for building Laika projects. To enable Laika site generation, simply enable the associated plugin in your build.sbt file:\nenablePlugins(LaikaSitePlugin)\nThis plugin assumes you have a Laika project under the src/laika directory. To change this, set the sourceDirectory key in the LaikaSite scope:\nLaikaSite / sourceDirectory := sourceDirectory.value / \"doc\"\nThis plugin use Laika sbt plugin internally and redefine default values for several Laika sbt keys which related to sourceDirectory in order to both work in harmony. Default setting of Laika sbt will be included automatically once you enable this plugin, you don’t need to include them manually and doing so may result in conflict.\nFrom other hand you can customize other aspects of Laika’s behavior through basic Laika sbt plugin keys and hooks. For example in order to add custom block directives you can include such code to your build.sbt:\nsbt LaikaSite / laikaBlockDirectives += CustomDirectives.postsToc\nLaikaSite / laikaSiteRenderers += CustomDirectives.postsRenderer","title":"Laika"},{"location":"/generators/nanoc.html","text":"","title":"Nanoc"},{"location":"/generators/nanoc.html#nanoc","text":"The sbt-site plugin has direct support for building Nanoc projects. To enable Nanoc site generation, simply enable the associated plugin in your build.sbt file:\nenablePlugins(NanocPlugin)\nThis assumes you have a Nanoc project under the src/nanoc directory. To change this, set the sourceDirectory key in the Nanoc scope:\nNanoc / sourceDirectory := sourceDirectory.value / \"conan\"\nSimilarly, the output can be redirected to a subdirectory of target/site via the siteSubdirName key in Nanoc scope:\n// Puts output in `target/site/conan`\nNanoc / siteSubdirName := \"conan\"","title":"Nanoc"},{"location":"/generators/pamflet.html","text":"","title":"Pamflet"},{"location":"/generators/pamflet.html#pamflet","text":"The sbt-site plugin has direct support for building Pamflet projects. To enable Pamflet site generation, simply enable the associated plugin in your build.sbt file:\nenablePlugins(PamfletPlugin)\nThis assumes you have a Pamflet project under the src/pamflet directory. To change this, set the sourceDirectory key in the Pamflet scope:\nPamflet / sourceDirectory := sourceDirectory.value / \"papyrus\"\nSimilarly, the output can be redirected to a subdirectory of target/site via the siteSubdirName key in Pamflet scope:\n// Puts output in `target/site/parchment`\nPamflet / siteSubdirName := \"parchment\"","title":"Pamflet"},{"location":"/generators/paradox.html","text":"","title":"Paradox"},{"location":"/generators/paradox.html#paradox","text":"The sbt-site plugin has direct support for building Paradox projects.\nTo enable Paradox site generation, enable the ParadoxSitePlugin plugin in your build.sbt file:\nenablePlugins(ParadoxSitePlugin)\nThis assumes you have a Paradox project under the src/main/paradox directory. To change this, set the sourceDirectory key in the paradox task scope:\nparadox / sourceDirectory := sourceDirectory.value / \"doc\"\nIf you are configuring Paradox from scratch remember to also configure a theme:\nparadoxTheme := Some(builtinParadoxTheme(\"generic\"))\nNote that all of the Paradox settings mentioned in the Paradox documentation are reused by sbt-site. For example to configure an @extref link prefix use:\nparadoxProperties ++= Map(\n  \"extref.rfc.base_url\" -> \"https://tools.ietf.org/html/rfc%s\"\n)","title":"Paradox"},{"location":"/generators/sphinx.html","text":"","title":"Sphinx"},{"location":"/generators/sphinx.html#sphinx","text":"The sbt-site plugin has direct support for building Sphinx projects. To enable Sphinx site generation, simply enable the associated plugin in your build.sbt file:\nenablePlugins(SphinxPlugin)\nThis assumes you have a Sphinx project under the src/sphinx directory. To change this, set the sourceDirectory key in the Sphinx scope:\nSphinx / sourceDirectory := sourceDirectory.value / \"androsphinx\"\nSimilarly, the output can be redirected to a subdirectory of target/site via the siteSubdirName key in Sphinx scope:\n// Puts output in `target/site/giza`\nSphinx / siteSubdirName := \"giza\"","title":"Sphinx"},{"location":"/publishing.html","text":"","title":"Publishing"},{"location":"/publishing.html#publishing","text":"The following sections show you how to configure publishing of your site. To publish a generated site to GitHub Pages you can use the sbt-ghpages plugin. For sites hosted on S3 one option is to use sbt-s3. We expect other publishing mechanisms to be supported in the future.","title":"Publishing"},{"location":"/publishing.html#publishing-to-github-pages-using-sbt-ghpages","text":"Set up the plugin by adding the following to project/plugins.sbt (check the sbt-ghpages project for the most recent version).\naddSbtPlugin(\"com.github.sbt\" % \"sbt-ghpages\" % \"0.7.0\")\nThen configure your sbt build to use a special remote when running on Travis CI and otherwise fall back to the normal Git remote configured via the scmInfo setting.\nscmInfo := Some(ScmInfo(url(\"https://github.com/sbt/sbt-site\"), \"scm:git:git@github.com:sbt/sbt-site.git\"))\nenablePlugins(GhpagesPlugin)\ngit.remoteRepo := scmInfo.value.get.connection.replace(\"scm:git:\", \"\")\nAt this point you should be able to run sbt ghpagesPushSite to publish your site.\nNote Before running sbt ghpagesPushSite the first time you need to create the gh-pages branch. One way to do it is to build your site and publish a first version of it using the following commands: $ sbt clean make-site                             # <1> Build the site\n$ origin=$(git remote get-url origin)             # <2> Save the current remote for later\n$ cd target/site\n$ git init                                        # <3> Create site repo and add initial content\n$ git add .\n$ git commit -m \"Initial import of GitHub Pages\"\n$ git push --force \"$origin\" master:gh-pages      # <4> Publish the repo's master branch as gh-pages","title":"Publishing to GitHub Pages using sbt-ghpages"},{"location":"/publishing.html#publishing-to-github-pages-from-travis-ci","text":"The following section walks you through the steps to configure Travis CI to publish your site as part of the deployment process. It assumes that you have already configured your sbt project to publish your site using the sbt-ghpages plugin as described in the previous section.\nSecurity Considerations The authentication mechanism that enables Travis CI to update the gh-pages branch requires that write access to your GitHub project is granted to an SSH key pair that you control. An encrypted version of the secret key must be added to the Git repository in order for Travis CI to decrypt it and make it available for pushing to your Git repository. This means that anyone with the ability to modify the Travis CI or sbt build configuration will be able to get hold of the secret key and gain write access to your GitHub repository. For this reason it is recommented to disable publishing for pull requests. The instructions are based on this gist and you are encouraged to consult the reasons for choosing this authentication mechanism.\nTo authenticate Travis CI to publish changes to the gh-pages branch you need to first generate an SSH key pair:\n$ ssh-keygen -t rsa -b 4096 -C \"sbt-site@travis\" -f project/travis-deploy-key\nAdd the public key found in project/travis-deploy-key.pub as a deploy key in the Deploy Keys section of your GitHub project’s settings page at https://github.com/[org]/[repo]/settings/keys. Make sure you allow write access for the deploy key by clicking the check box.\nPrepare the secret key for inclusion in the repository by opening a terminal and encrypting the secret key file using the Travis CLI:\n$ gem install travis\n$ travis encrypt-file project/travis-deploy-key project/travis-deploy-key.enc\nencrypting project/travis-deploy-key for [org]/[repo]\nstoring result as project/travis-deploy-key.enc\nstoring secure env variables for decryption\n\nPlease add the following to your build script (before_install stage in your .travis.yml, for instance):\n\n    openssl aes-256-cbc -K $encrypted_3afbfedfa397_key -iv $encrypted_3afbfedfa397_iv -in project/travis-deploy-key.enc -out project/travis-deploy-key -d\n\nPro Tip: You can add it automatically by running with --add.\n\nMake sure to add project/travis-deploy-key.enc to the git repository.\nMake sure not to add project/travis-deploy-key to the git repository.\nCommit all changes to your .travis.yml.\nAs instructed in the output of the command add the encrypted secret key found in project/travis-deploy-key.enc to the repository and delete or ignore the unencrypted secret key file.\n$ git add project/travis-deploy-key.enc\n$ echo project/travis-deploy-key >> .git/info/exclude\nFinally, configure a deploy step in .travis.yml using the script provider. For a complete set of options and triggers see the Travis deployment documentation. In this example, we publishing when a tag is created and explicitly disable publishing for pull request. The before_deploy step takes care of setting up the environment so that git push automatically finds the deploy key.\nbefore_deploy:\n  # Record minimal build information via the Git user ident\n  - git config --global user.name \"$USER\"\n  - git config --global user.email \"$TRAVIS_BUILD_NUMBER@$TRAVIS_COMMIT\"\n  # Decrypt the secret deploy key using instructions from `travis encrypt-file`\n  - openssl aes-256-cbc -K $encrypted_3afbfedfa397_key -iv $encrypted_3afbfedfa397_iv -in project/travis-deploy-key.enc -out project/travis-deploy-key -d\n  - chmod 600 project/travis-deploy-key\n  # Start ssh-agent in the background and load the deploy key\n  - eval \"$(ssh-agent -s)\"\n  - ssh-add project/travis-deploy-key\n\ndeploy:\n  provider: script\n  script: sbt ghpagesPushSite\n  skip_cleanup: true\n  on:\n    tags: true\n    condition: $TRAVIS_PULL_REQUEST = false && $SBT_CROSS_VERSION = 1.1*\nNote Ensure that you modify the above example to use the instructions on how to decrypt the deploy key provided in the output of the travis encrypt-file command. At this point, it would also be a good idea to run travis lint to check that the resulting .travis.yml is correct.","title":"Publishing to GitHub Pages from Travis CI"},{"location":"/advanced-usage.html","text":"","title":"Advanced Usage"},{"location":"/advanced-usage.html#advanced-usage","text":"Here are listed examples of a more advanced usage.","title":"Advanced Usage"},{"location":"/advanced-usage.html#running-a-site-generator-on-multiple-source-directories","text":"If you need to run a generator on more than one source directory, bypassing the AutoPlugin system and defining one or more sbt Configurations is necessary. For example, suppose you have two Paradox source directories and want them each generated as a subdirectory under target/site. A build.sbt might look something like this:\n// Define two `Configuration` instances.\nval Site1 = config(\"site1\")\nval Site2 = config(\"site2\")\n\n// Apply the default Paradox settings to the `Site1` config\nParadoxPlugin.paradoxSettings(Site1)\nParadoxSitePlugin.paradoxSettings(Site1)\n\n// Customize the source directory\nSite1 / paradox / sourceDirectory := sourceDirectory.value / \"paradox-site-1\"\n\n// Customize the output subdirectory\nSite1 / siteSubdirName := \"chapter1\"\n\n// Same as above, but for config `Site2` keep the default source directory\nParadoxPlugin.paradoxSettings(Site2)\nParadoxSitePlugin.paradoxSettings(Site2)\nSite2 / siteSubdirName := \"chapter2\"\n\n// Global Paradox settings\nenablePlugins(ParadoxPlugin)\nparadoxTheme := Some(builtinParadoxTheme(\"generic\"))\nThe other generators follow a similar pattern, e.g. JekyllPlugin.jekyllSettings(config(\"foo\")).","title":"Running a Site Generator on Multiple Source Directories"},{"location":"/migration-guide.html","text":"","title":"Migration Guide"},{"location":"/migration-guide.html#migration-guide","text":"","title":"Migration Guide"},{"location":"/migration-guide.html#migrating-from-version-1-3-x-to-1-4-x","text":"Only sbt >1.1.6 is supported.","title":"Migrating from version 1.3.x to 1.4.x"},{"location":"/migration-guide.html#paradoxsiteplugin","text":"ParadoxPlugin is enabled whenever ParadoxSitePlugin is enabled.\nParadox integration now uses the same configuration scopes as the sbt-paradox plugin. Therefore when upgrading remove the Paradox configuration scope from all of the sbt-paradox settings. Note that sbt-site setting siteSubdirName is still configured under the Paradox configuration scope.\nThe default Paradox source directory has been changed to match the one defined in the sbt-paradox, which is src/main/paradox. To keep the previous default, add the following to the build: paradox / sourceDirectory := sourceDirectory.value","title":"ParadoxSitePlugin"},{"location":"/migration-guide.html#migrating-from-version-0-x-x-to-1-x-x","text":"The 1.x.x release of sbt-site marks the conversion to the AutoPlugin facility, first introduced in sbt 0.13.5.\nBecause sbt best practices have evolved with the introduction of AutoPlugin, this upgrade to sbt-site has resulted in a number of “breaking changes” insofar as the way site generation is configured (the same functionality remains).","title":"Migrating from version 0.x.x to 1.x.x"},{"location":"/migration-guide.html#enabling-generators","text":"The biggest of the breaking changes is the use of enablePlugins(<plugin object>) instead of calls of the form site.xyzSupport().\nThe base plugin (SitePlugin) is enabled by default, so files in the src/site directory are processed according to the default settings. Invocation of other generators must be adjusted accordingly.\nGenerator Previous (0.x) New (1.x) Base site.settings automatic Preprocess site.preprocessSite() enablePlugins(PreprocessPlugin) Jekyll site.jekyllSupport() enablePlugins(JekyllPlugin) Sphinx site.sphinxSupport() enablePlugins(SphinxPlugin) Pamflet site.pamfletSupport() enablePlugins(PamfletPlugin) Nanoc site.nanocSupport() enablePlugins(NanocPlugin) Asciidoctor site.asciidoctorSupport() enablePlugins(AsciidoctorPlugin) Scaladoc site.includeScaladoc() enablePlugins(SiteScaladocPlugin)","title":"Enabling Generators"},{"location":"/migration-guide.html#configuring-site-subdirectory","text":"Each of the generators can be instructed to populate a subdirectory under the target/site destination. This is done by setting the siteSubdirName key in the configuration scope of the generator. For example, the following build.sbt fragment enables the Jekyll and Scaladoc generators, and configures their output to be target/site/jekyll-goodness and target/site/jekyll-goodness/api, respectively.\nenablePlugins(JekyllPlugin, SiteScaladocPlugin)\nsiteSubdirName in Jekyll := \"jekyll-goodness\"\nsiteSubdirName in SiteScaladoc := \"jekyll-goodness/api\"","title":"Configuring Site Subdirectory"},{"location":"/migration-guide.html#adding-custom-mappings-to-a-site-directory","text":"Content added using:\nsite.addMappingsToSiteDir(mappings: TaskKey[Seq[(File,String)]], nestedDirectory: String)\nhas been replaced with:\naddMappingsToSiteDir(mappings: TaskKey[Seq[(File, String)]], nestedDirectory: SettingKey[String])\nThe following examples show how you can define nested directory via a custom setting or by scoping siteSubdirName to either an sbt key or configuration:\n// Define a custom setting and set it to the directory path\nval someDirName = settingKey[String](\"Some dir name\")\nsomeDirName := \"someFancySource\"\n\naddMappingsToSiteDir(Compile / packageSrc / mappings, someDirName)\n\n// Or using siteSubdirName scoped to a sbt task or a configuration\nScalaUnidoc / siteSubdirName := \"api\"\naddMappingsToSiteDir(ScalaUnidoc/ packageDoc / mappings, ScalaUnidoc / siteSubdirName)","title":"Adding Custom Mappings to a Site Directory"},{"location":"/migration-guide.html#miscellaneous","text":"In the PreprocessPlugin, the key preprocessExts: SettingKey[Set[String]] has been replaced by preprocessIncludeFilter: SettingKey[FileFilter].","title":"Miscellaneous"},{"location":"/notes/index.html","text":"","title":"Release Notes"},{"location":"/notes/index.html#release-notes","text":"See GitHub Releases\nRelease 1.4.0 Release 1.3.3 Release 1.3.3 Release 1.3.1 Release 1.3.0 Release 1.2.1 Release 1.2.0 Release 1.1.0 Release 1.0.0 Release 0.8.2","title":"Release Notes"},{"location":"/notes/1.4.0.html","text":"","title":"Release 1.4.0"},{"location":"/notes/1.4.0.html#release-1-4-0","text":"See the 1.4.0 milestone for the full list of related tickets and PRs.","title":"Release 1.4.0"},{"location":"/notes/1.4.0.html#breaking-changes","text":"sbt-site is published for sbt >1.1.6, only upgrade to Paradox 0.5.x (with its breaking changes) Paradox integration has been changed to reuse settings from sbt-paradox plugin. Take a look at the migration guide to see what actions need to be taken when upgrading.","title":"Breaking changes"},{"location":"/notes/1.4.0.html#enhancements","text":"","title":"Enhancements"},{"location":"/notes/1.3.3.html","text":"","title":"Release 1.3.3"},{"location":"/notes/1.3.3.html#release-1-3-3","text":"See the 1.3.3 milestone for the full list of related tickets and PRs.","title":"Release 1.3.3"},{"location":"/notes/1.3.3.html#enhancements","text":"add asciidoctor-diagram support #129 by @jonas Add SVG and XML to JekyllPlugin’s includeFilter #138 by @azolotko Allow general search and replace in Preprocess #139 by @2m Add setting for path in preview #147 by @ennru","title":"Enhancements"},{"location":"/notes/1.3.2.html","text":"","title":"Release 1.3.3"},{"location":"/notes/1.3.2.html#release-1-3-3","text":"See the 1.3.3 milestone for the full list of related tickets and PRs.","title":"Release 1.3.3"},{"location":"/notes/1.3.2.html#enhancements","text":"add asciidoctor-diagram support #129 by @jonas Add SVG and XML to JekyllPlugin’s includeFilter #138 by @azolotko Allow general search and replace in Preprocess #139 by @2m Add setting for path in preview #147 by @ennru","title":"Enhancements"},{"location":"/notes/1.3.1.html","text":"","title":"Release 1.3.1"},{"location":"/notes/1.3.1.html#release-1-3-1","text":"See the 1.3.1 milestone for the full list of related tickets and PRs.","title":"Release 1.3.1"},{"location":"/notes/1.3.1.html#enhancements","text":"Bump Paradox to version 0.3.0 and support the Paradox site plugin for sbt 1.0. #111 by @jonas","title":"Enhancements"},{"location":"/notes/1.3.1.html#fixes","text":"Enable sbt-ghpages integration test for sbt 1.0. #110 by @xuwei-k","title":"Fixes"},{"location":"/notes/1.3.0.html","text":"","title":"Release 1.3.0"},{"location":"/notes/1.3.0.html#release-1-3-0","text":"See the 1.3.0 milestone for the full list of related tickets and PRs.","title":"Release 1.3.0"},{"location":"/notes/1.3.0.html#enhancements","text":"Cross publish to both sbt 0.13 and 1.x. #105, #106, #107 by @larsrh & @xuwei-k Bump pamflet to version 0.7.1. #103 by @xuwei-k","title":"Enhancements"},{"location":"/notes/1.3.0.html#fixes","text":"Fix the build in Travis. #104 by @ashawley","title":"Fixes"},{"location":"/notes/1.3.0.html#using-sbt-site-with-sbt-version-1-0","text":"This release adds support for sbt 1.0, however, the Laika and Paradox generators are only available for sbt 0.13.","title":"Using sbt-site with sbt version 1.0"},{"location":"/notes/1.2.1.html","text":"","title":"Release 1.2.1"},{"location":"/notes/1.2.1.html#release-1-2-1","text":"See the 1.2.1 milestone for the full list of related tickets and PRs.","title":"Release 1.2.1"},{"location":"/notes/1.2.1.html#enhancements","text":"Support for Laika site generation. #92 by @vshalts Upgrade Paradox to version 0.2.12. #93, #101 by @sirthias & @jonas Export optional environment variable map for Hugo. #98 by @bfritz Update sbt to version 0.13.15 and fix warnings. #100 by @xuwei-k","title":"Enhancements"},{"location":"/notes/1.2.1.html#fixes","text":"Fix issues with Hugo 0.20.1 version extraction. #96, #97 by @vshalts","title":"Fixes"},{"location":"/notes/1.2.0.html","text":"","title":"Release 1.2.0"},{"location":"/notes/1.2.0.html#release-1-2-0","text":"See the 1.2.0 milestone for the full list of related tickets and PRs.","title":"Release 1.2.0"},{"location":"/notes/1.2.0.html#enhancements","text":"Support for Hugo site generation. Thanks @timperrett! Added excludeFilter support to GitBook generator. Thanks @jonas! Added previewAuto command, which launches a dynamic HTML server updating content with each modification in site source. Thanks @gsechaud! Note: This change includes an upgrade of the unfiltered depenency. Please let us know of any incompatibilities with other plugins that might be caused by this change. Bump Paradox to version 0.2.7 by @jonas Improve support for GitBook version 3.x.x. #83 by @jonas Paradox-based documentation site at https://www.scala-sbt.org/sbt-site/ with improved examples. #84, #55 – @jonas Auto generation/publishing of docs via TravisCI by @jonas Updated release process docs by @metasim","title":"Enhancements"},{"location":"/notes/1.2.0.html#fixes","text":"Fix default settings for Paradox. #74, #80 by @jonas Fix default GitBook mappings to not include .git and .gitignore. #67 by @jonas","title":"Fixes"},{"location":"/notes/1.1.0.html","text":"","title":"Release 1.1.0"},{"location":"/notes/1.1.0.html#release-1-1-0","text":"","title":"Release 1.1.0"},{"location":"/notes/1.1.0.html#enhancements","text":"Support for Paradox. Thanks @eed3si9n!","title":"Enhancements"},{"location":"/notes/1.0.0.html","text":"","title":"Release 1.0.0"},{"location":"/notes/1.0.0.html#release-1-0-0","text":"Please consult the migration guide before upgrading to this version.","title":"Release 1.0.0"},{"location":"/notes/1.0.0.html#enhancements","text":"Conversion to AutoPlugin Support for GitBook generator. (Thanks to @jonas!)","title":"Enhancements"},{"location":"/notes/1.0.0.html#project-management","text":"Added scripted tests for:\nnanoc pamflet site + scaladoc sphinx gitbook\nCode and documentation cleanup","title":"Project Management"},{"location":"/notes/0.8.2.html","text":"","title":"Release 0.8.2"},{"location":"/notes/0.8.2.html#release-0-8-2","text":"","title":"Release 0.8.2"},{"location":"/notes/0.8.2.html#enhancements","text":"Finished partially implemented “preprocessing” site generation mode whereby files in src/site-preprocess with @ delimited variables (e.g. @VERSION@) are expanded based on values in setting preprocessVars[Map[String, String]].","title":"Enhancements"},{"location":"/notes/0.8.2.html#project-management","text":"Updated sbt, Scala, and plugin versions Added Travis-CI build support. Added Gitter link.","title":"Project Management"}]}